#!/usr/bin/env bash

# read the data (it's just one line luckily)
echo reading data
read -r compressed

. parr

print-file() {
	local idx=$1

	local next=${nextfile[idx]}
	local size=${filesize[idx]}
	local free=${freeblocks[idx]}

	echo "file (idx $idx) next=$next, size=$size, free after=$free"
}

print-all() {
	local i j
	local len=${#filenames[@]}
	for ((i = 0; i < len; i++)); do
		local name=${filenames[i]}
		local size=${filesize[i]}
		local free=${freeblocks[i]}

		echo "page $name: size $size free $free"
#		for ((j = 0; j < size; j++)); do
#			echo -n "$name"
#		done
#		for ((j = 0; j < free; j++)); do
#			echo -n .
#		done
	done
#	echo
}
calculate-checksum() {
	local i j
	local accum=0
	local len=${#filenames[@]}
	local total=0
	for ((i = 0; i < len; i++)); do
		local name=${filenames[i]}
		local size=${filesize[i]}
		local free=${freeblocks[i]}

		for ((j = 0; j < size; j++)); do
			((accum += name * total))
			((total++))
		done
		for ((j = 0; j < free; j++)); do
			((total++))
		done
	done
	echo "$accum"
}

recreate-all-arrays() {
	local nf=0
	local new_freeblocks=()
	local new_filesize=()
	local new_filenames=()

	#echo before
	#parr filenames
	local len=${#nextfile[@]}
	local i
	#echo $len
	#parr nextfile
	for ((i = 0; i < len; i++)); do
		#[[ $nf == 'null' ]] && break
		local name=${filenames[nf]}
		local size=${filesize[nf]}
		local free=${freeblocks[nf]}

#		echo ">>>$name<<<"

		new_filenames+=("$name")
		new_filesize+=("$size")
		new_freeblocks+=("$free")

		nf=${nextfile[nf]}
	done

#	echo before
#	parr filenames

#	echo before
#	printf "<%s>\n" "${filenames[@]}"
	freeblocks=("${new_freeblocks[@]}")
	filenames=("${new_filenames[@]}")
	filesize=("${new_filesize[@]}")
	nextfile=()
#	echo after
#	printf "<%s>\n" "${filenames[@]}"
#	echo done

	local len=${#filenames[@]}
	nextfile=( $(seq 1 "$len") )
#	for ((i = 0; i < len; i++)); do
#		nextfile+=("$((i + 1))")
#	done

#	echo after
#	parr filenames
}

nextfile=()
freeblocks=()
filesize=()
filenames=()

len=${#compressed}
LENGTH=0
for ((i = 0; i < len; i++)); do
	num=${compressed:i:1}
	idx=$((i / 2))

	if ((i % 2 == 0)); then
		# blocks
		filenames[idx]=$idx
		nextfile[idx]=$((idx+1))
		filesize[idx]="$num"
	else
		# free space
		freeblocks[idx]="$num"
	fi
done
nextfile[idx]='null'
freeblocks[idx]=0

#print-all

len=${#nextfile[@]}
startj=0
declare -A has_moved
echo $len
for ((i = len - 1; i > 0; i--)); do
	name=${filenames[i]}
	if [[ -n ${has_moved[$name]} ]]; then
		continue
	fi
	has_moved[$name]=1

	# try to move this block as far left as possible
	cur_size=${filesize[i]}
	echo "trying to move $i -> name ${filenames[i]} (startj = $startj)" >&2
	for ((j = startj; j < i; j++)); do
		free_space=${freeblocks[j]}
		if ((j == startj + 1 && free_space == 0)); then
			((startj++))
		fi

#		echo trying to move $i after $j
#		print-file "$i"
#		print-file "$j"
		if ((free_space < cur_size)); then
#			echo "can't move $i -> $j"
			continue
		fi

#		echo "can move $i (${filenames[i]}) -> $j (${filenames[j]})"

		# we have room!
		# a b (c) d e f (g) h
		# 1. remove g
		# 2. increase f free_after by g.size + g.free_after
		# 3. set g.free_after to c.free_after - g.size
		# 4. set c.free_after to 0
		# 5. insert g to c+1 location
		g=$i
		c=$j
		f=$((g - 1))

		c_free_after=${freeblocks[c]}
		g_free_after=${freeblocks[g]}
		g_size=${filesize[g]}


		# 1. and 5.
		# only swap if needed
		if ((g - c > 1)); then
			# 2.
			((freeblocks[f] += g_free_after + g_size))

			# 3.
			((freeblocks[g] = c_free_after - g_size))

			# 4.
			freeblocks[c]=0

			nextfile[c]=$g
			nextfile[f]=${nextfile[g]}
			nextfile[g]=$((c+1))

			# recreate all arrays
			recreate-all-arrays
		else
			((freeblocks[g] += freeblocks[c]))
			freeblocks[c]=0
			# don't swap them, just update free space


		fi

		((i++)) # try again
		break
	done
	#print-all
done

print-all | tee final.txt

calculate-checksum
