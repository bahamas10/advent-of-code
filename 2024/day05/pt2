#!/usr/bin/env bash

# read the rules (first half of the file)
declare -A rules
while IFS='|' read -r lhs rhs; do
	[[ -n $lhs ]] || break
	rules[$rhs]+="$lhs "
done

# check if an array contains a needle
# ex: contains foo "${array[@]}"
contains() {
	local needle=$1
	local hay
	shift
	for hay in "$@"; do
		[[ $needle == "$hay" ]] && return 0
	done
	return 1
}

check-safety() {
	local update=("$@")

	# loop each number in the update and check it
	local i
	for ((i = 0; i < ${#update[@]}; i++)); do
		local num=${update[i]}

		# extract rules for this number (array might be empty)
		local rulesfornum
		read -ra rulesfornum <<< "${rules[$num]}"

		local rule
		# loop rules and ensure they don't show up later in the update
		for rule in "${rulesfornum[@]}"; do
			if contains "$rule" "${update[@]:i+1}"; then
				return 1
			fi
		done
	done
	return 0
}

# read the updates and test them
accum=0
while IFS=, read -ra update; do
	if check-safety "${update[@]}"; then
		continue
	fi

	echo "checking update: ${update[*]} :: unsafe"

	len=${#update[@]}
	for ((i = 0; i < len; i++)); do
		num=${update[i]}

		# extract rules for this number (array might be empty)
		read -ra rulesfornum <<< "${rules[$num]}"

		# loop rules and ensure they don't show up later in the update
		for ((j = i + 1; j < len; j++)); do
			for rule in "${rulesfornum[@]}"; do
				checknum=${update[j]}
				[[ $rule == $checknum ]] || continue

				unset update[j]
				unset update[i]
				echo "  -- ${update[*]}"
				# we found a rule violation change original array
				update=("${update[@]:0:i}" "$checknum" "$num" "${update[@]:i+1}")
				echo "  => ${update[*]}"
				((i--))
				continue 3
			done
		done
	done

	echo "new = ${update[*]}"

	# order is unsafe - fix it somehow magically
	idx=$((len / 2))
	middle=${update[idx]}
	((accum += middle))
done

echo "total is $accum"
