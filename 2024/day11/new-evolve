#!/usr/bin/env bash

stone=$1
iters=$2

. parr

declare -A cache
cache[0]="1:1"
cache[1]="1 2 4:2,0,2,4"
cache[2]="1 2 4:4,0,4,8"
cache[3]="1 2 4:6,0,7,2"
cache[4]="1 2 4:8,0,9,6"
cache[5]="1 1 2 4 8:2,0,4,8,2,8,8,0"
cache[6]="1 1 2 4 8:2,4,5,7,9,4,5,6"
cache[7]="1 1 2 4 8:2,8,6,7,6,0,3,2"
cache[8]="1 1 2 4:32,77,26,8"
cache[9]="1 1 2 4 8:3,6,8,6,9,1,8,4"
cache[32]="1:3,2"
cache[77]="1:7,7"
cache[26]="1:2,6"

stones=("$stone")


debug() {
	echo "[debug] $@" >&2
}

total=0
step() {
	local newarray=()
	local stone
	for stone in "${stones[@]}"; do
		if ((stone == 0)); then
			newarray+=(1)
		elif ((${#stone} % 2 == 0)); then
			local len=${#stone}
			local middle=$((len / 2))
			local first=${stone:0:middle}
			local second=${stone:middle}
			newarray+=( $((10#$first)) )
			newarray+=( $((10#$second)) )
		else
			newarray+=( $((stone * 2024)) )
		fi
	done
	stones=( "${newarray[@]}" )
}

evolve() {
	local stone=$1
	local togo=$2
	local depth=${3:-0}

	local numstones=1
	local i
	local newstone

	if ((depth == togo)); then
		((total += numstones))
		return
	fi

	local cached=${cache[$stone]}
	if [[ -n $cached ]]; then
		# cache[5]="1 1 2 4 8:2,0,4,8,2,8,8,0"
		IFS=: read -r lhs rhs <<< "$cached"
		read -ra stonecount <<< "$lhs"
		IFS=, read -ra values <<< "$rhs"

		#debug depth before = $depth
		for ((i = 0; i < ${#stonecount[@]}; i++)); do
			numstones=${stonecount[i]}
			((depth++))
			if ((depth == togo)); then
				# stop condition
				((total += numstones))
				return
			fi
		done
		#debug depth before = $depth

#		echo at $depth of $togo

		# if we are here we still have deeper to go for each stone
		for newstone in "${values[@]}"; do
			evolve "$newstone" "$togo" "$depth"
		done
	else
		debug cache miss $stone
		((depth++))
		if ((stone == 0)); then
			evolve 1 "$togo" "$depth"
		elif ((${#stone} % 2 == 0)); then
			local len=${#stone}
			local middle=$((len / 2))
			local first=${stone:0:middle}
			local second=${stone:middle}
			newarray+=( $((10#$first)) )
			newarray+=( $((10#$second)) )
			evolve "$((10#$first))" "$togo" "$depth"
			evolve "$((10#$second))" "$togo" "$depth"
		else
			evolve "$((stone * 2024))" "$togo" "$depth"
		fi
	fi
}

read -ra stones

i=0
for stone in "${stones[@]}"; do
	debug "$i of ${#stones[@]}"
	((i++))
	evolve "$stone" 25
done

echo total is $total
