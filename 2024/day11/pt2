#!/usr/bin/env bash

read -ra stones

declare -A cache
cache[0]="1:1"
cache[1]="1 2 4:2,0,2,4"
cache[2]="1 2 4:4,0,4,8"
cache[3]="1 2 4:6,0,7,2"
cache[4]="1 2 4:8,0,9,6"
cache[5]="1 1 2 4 8:2,0,4,8,2,8,8,0"
cache[6]="1 1 2 4 8:2,4,5,7,9,4,5,6"
cache[7]="1 1 2 4 8:2,8,6,7,6,0,3,2"
cache[8]="1 1 2 4:32,77,26,8"
cache[9]="1 1 2 4 8:3,6,8,6,9,1,8,4"
cache[32]="1:3,2"
cache[77]="1:7,7"
cache[26]="1:2,6"

DEBUG=0
debug() {
	((DEBUG == 1)) && echo "> $@"
}

# run the algorithm once on this
step() {
	local newarray=()
	local stone
	for stone in "${stones[@]}"; do
		local cached=${cache[$stone]}
		if [[ -n $cached ]]; then
			newarray+=($cached)
			continue
		fi

		local result=()
		if ((stone == 0)); then
			result+=(1)
		elif ((${#stone} % 2 == 0)); then
			debug even digits found with $stone
			local len=${#stone}
			local middle=$((len / 2))
			local first=${stone:0:middle}
			local second=${stone:middle}
			result+=("$((10#$first))" "$((10#$second))")
		else
			result+=( $((stone * 2024)) )
		fi

		cache[$stone]="${result[*]}"

		newarray+=("${result[@]}")
	done

	stones=("${newarray[@]}")
}

print-stones() {
	echo "${stones[*]}"
}

#print-stones
#for i in {1..75}; do
#	echo "$i, have ${#stones[@]} stones"
#	step
	#print-stones > "data/$i.txt"
#done

#echo "have ${#stones[@]}"
stone=${stone[0]}
