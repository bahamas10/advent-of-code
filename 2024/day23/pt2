#!/usr/bin/env bash

. ./vardump



# read *all* connections (will have dupes)
echo read all connections
declare -A connections
while IFS='-' read -r a b; do
	connections[$a]+=" $b"
	connections[$b]+=" $a"
done

# normalize data (remove dupes)
echo remove duplicates
for key in "${!connections[@]}"; do
	value=${connections[$key]}

	read -ra values <<< "$value"
	declare -A c=()
	for value in "${values[@]}"; do
		c[$value]=1
	done
	s=${!c[*]}
	connections[$key]=" $s"
done

min=-1
answer=
for root in "${!connections[@]}"; do
	neighbors=${connections[$root]}
	echo "checking $root with neighbors $neighbors"

	declare -A seen=()
	seen[$root]=1

	read -ra neighbors <<< "$neighbors"
	for neighbor in "${neighbors[@]}"; do
		seen[$neighbor]=1
	done

	for neighbor in "${neighbors[@]}"; do
		grandneighbors=${connections[$neighbor]}
		read -ra grandneighbors <<< "$grandneighbors"
		for grandneighbor in "${grandneighbors[@]}"; do
			((seen[$grandneighbor]++))
		done
	done

	#vardump seen

	declare -A counts=()
	for value in "${seen[@]}"; do
		counts[$value]=1
	done

	sorted=( $(printf '%s\n' "${!counts[@]}" | sort -rn)   )

	declare -A venn=()
	for key in "${!seen[@]}"; do
		value=${seen[$key]}
		venn[$value]+=" $key"
	done
	#vardump venn

	friends=''
	for num in "${sorted[@]}"; do
		subset=${venn[$num]}
		friends+=" $subset "

		read -ra friends_arr <<< "$friends"
		if (( ${#friends_arr[@]} >= num )); then
			if ((num > min)); then
				min=$num
				answer=$friends
			fi
			break
		fi
	done
done

read -ra answers <<< "$answer"

# lol seriously? we can avoid sort though lmao
mkdir -p ./foo
cd ./foo || exit 1
for answer in "${answers[@]}"; do
	touch "$answer"
done

# let bash sort this by using globbing
answer=(*)
IFS=,
echo "answer is ${answer[*]}"
