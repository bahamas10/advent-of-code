#!/usr/bin/env bash

. ./vardump

# example
WIDTH=11
HEIGHT=7
# real
WIDTH=101
HEIGHT=103

BEGIN=${1:-0}
STEP=${2:-1}

# make screen ready for drawing
cleanup() {
	tput cnorm
	tput rmcup
}
trap cleanup exit
tput civis
tput smcup

print-grid() {
	local y x
	for ((y = 0; y < HEIGHT; y += 2)); do
		for ((x = 0; x < WIDTH; x++)); do
			local key="$x,$y"
			local c1=${robots[$key]}

			key="$x,$((y+1))"
			local c2=${robots[$key]}

			local c=' '
			if [[ -n $c1 && -n $c2 ]]; then
				c=':'
			elif [[ -n $c1 ]]; then
				c="'"
			elif [[ -n $c2 ]]; then
				c="."
			fi

			echo -n "$c"
		done
		echo
	done
}

num-robots-in-area() {
	local minx=$1
	local maxx=$2
	local miny=$3
	local maxy=$4

	local y x
	local total=0
	for ((y = miny; y < maxy; y++)); do
		for ((x = minx; x < maxx; x++)); do
			local key="$x,$y"
			local c=${robots[$key]:-0}
			((total += c))
		done
	done
	echo "$total"
}

# ex: p=0,4 v=3,-3
re='^p=([0-9]+),([0-9]+) v=(-?[0-9]+),(-?[0-9]+)$'

declare -A robots
all=()
while read -r line; do
	[[ $line =~ $re ]] || exit 5

	px=${BASH_REMATCH[1]}
	py=${BASH_REMATCH[2]}
	vx=${BASH_REMATCH[3]}
	vy=${BASH_REMATCH[4]}

	all+=("$px $py $vx $vy")
	robots[$px,$py]=1
done

if ((BEGIN > 0)); then
	robots=()
	new_all=()
	for robot in "${all[@]}"; do
		read -r px py vx vy <<< "$robot"
		((px += vx * BEGIN))
		((py += vy * BEGIN))

		# clamp the robot back into bounds
		((px %= WIDTH))
		((py %= HEIGHT))

		# handle negative bounds
		((px = (px + WIDTH) % WIDTH))
		((py = (py + HEIGHT) % HEIGHT))

		key=$px,$py
		((robots[$key]++))
		new_all+=("$px $py $vx $vy")
	done
	all=("${new_all[@]}")
fi

i=$BEGIN
while true; do
	disp=$(print-grid)
	tput cup 0 0
	echo "$disp"
	echo "iteration $i"

	# run a simulation and print the grid
	robots=()
	new_all=()
	for robot in "${all[@]}"; do
		read -r px py vx vy <<< "$robot"
		((px += vx * STEP))
		((py += vy * STEP))

		# clamp the robot back into bounds
		((px %= WIDTH))
		((py %= HEIGHT))

		# handle negative bounds
		((px = (px + WIDTH) % WIDTH))
		((py = (py + HEIGHT) % HEIGHT))

		key=$px,$py
		((robots[$key]++))
		new_all+=("$px $py $vx $vy")
	done
	all=("${new_all[@]}")

	((i += STEP))
done

exit


# calculate the number of robots in each quadrant
midx=$((WIDTH / 2))
midy=$((HEIGHT / 2))
I=$(  num-robots-in-area "$((midx + 1))" "$WIDTH" 0 "$((HEIGHT / 2))")
II=$( num-robots-in-area 0       "$midx"  0 "$midy")
III=$(num-robots-in-area 0       "$midx"  "$((midy + 1))" "$HEIGHT")
IV=$( num-robots-in-area "$((midx + 1))" "$WIDTH" "$((midy + 1))" "$HEIGHT")

((total = I * II * III * IV))
echo "found robots $I * $II * $III * $IV = $total"
