#!/usr/bin/env bash

declare -A grid=()

. ./vardump

WALL=$(tput setaf 1)
FREE=$(tput dim)
RST=$(tput sgr0)

print-grid() {
	local x y
	for ((y = 0; y < height; y++)); do
		for ((x = 0; x < width; x++)); do
			local c=${grid[$x,$y]}
			if [[ $c == '#' ]]; then
				c=$WALL'##'$RST
			elif [[ $c == '.' ]]; then
				c=$FREE'..'$RST
				c=${visited[$x,$y]:-0}
				((c < 10)) && c=0$c
			fi
			echo -n "$c"
		done
		echo
	done
}

# read the maze
height=0
while read -r line; do
	width=${#line}
	for ((x = 0; x < width; x++)); do
		key=$x,$height
		c=${line:x:1}

		case "$c" in
			'.') ;;
			'#') ;;
			'S')
				start_loc=$key
				c='.'
				;;
			'E')
				end_loc=$key
				c='.'
				;;
		esac
		grid[$key]=$c
	done

	((height++))
done

echo "maze is $width x $height"
echo "start_loc = $start_loc"
echo "end_loc = $end_loc"

print-grid

# solve the maze
queue=()
queue+=("$start_loc")
distance=0
declare -A visited=()
while ((${#queue[@]} > 0)); do
	# pop off first element from array
	pos=${queue[-1]}
	unset queue[-1]

	printf '%d...\r' "$i"

	IFS=, read -r x y <<< "$pos"
	key=$x,$y

	# check if we are in bounds
	if ((x < 0 || x >= width || y < 0 || y >= height)); then
		continue
	fi

	# check if we have collision
	c=${grid[$key]}
	if [[ $c == '#' ]]; then
		continue
	fi

	# check if we've been here before
	if [[ -n ${visited[$key]} ]]; then
		continue
	fi

	# this move is valid - mark it as seen
	visited[$key]=$distance

	# check if we won
	if [[ $key == $end_loc ]]; then
		echo
		echo solved!
		echo took $distance steps
		break
	fi

	((distance++))

	# queue up trying  all 4 directions
	# north
	nextx=$x
	nexty=$((y - 1))
	queue+=("$nextx,$nexty")

	# south
	nextx=$x
	nexty=$((y + 1))
	queue+=("$nextx,$nexty")

	# east
	nextx=$((x + 1))
	nexty=$y
	queue+=("$nextx,$nexty")

	# west
	nextx=$((x - 1))
	nexty=$y
	queue+=("$nextx,$nexty")
done

print-grid

check-shortcut() {
	local key1=$1
	local key2=$2
	local num1=${visited[$key1]}
	local num2=${visited[$key2]}

	echo "check-shortcut key1=$key1 key2=$key2"
	echo "num1=$num1 num2=$num2"
	[[ -n $num1 && -n $num2 ]] || return

	local diff=$((num2 - num1))
	local dist=${diff#-}
	((dist -= 2))
	((dist <= 0)) && return

	echo shortcut valid!
	local key="$key1|$key2"
	shortcuts[$key]=$dist

}

# check every wall for possible shortcuts
declare -A shortcuts=()
for ((y = 0; y < height; y++)); do
	for ((x = 0; x < width; x++)); do
		key=$x,$y
		c=${grid[$key]}
		[[ $c == '#' ]] || continue

		echo "checking wall at $key"

		# check all spots around us

		# check N->W
		check-shortcut "$x,$((y-1))" "$((x-1)),$y"
		# check N->E
		check-shortcut "$x,$((y-1))" "$((x+1)),$y"
		# check N->S
		check-shortcut "$x,$((y-1))" "$x,$((y+1))"

		# check W->E
		check-shortcut "$((x-1)),$y" "$((x+1)),$y"

		# check S->W
		check-shortcut "$x,$((y+1))" "$((x-1)),$y"
		# check S->E
		check-shortcut "$x,$((y+1))" "$((x+1)),$y"
	done
done

vardump -v shortcuts
declare -A count
total=0
for key in "${!shortcuts[@]}"; do
	value=${shortcuts[$key]}
	if ((value >= 100)); then
		((total++))
	fi
	((count[$value]++))
done
echo "found $total valid shortcuts"

#vardump count
