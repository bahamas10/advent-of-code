#!/usr/bin/env bash

declare -A grid
declare -A original_grid

CONCURRENCY=50

debug=false
while getopts 'd' opt; do
	case "$opt" in
		d) debug=true;;
		*) exit 1;;
	esac
done

fatal() {
	echo "$@" >&2
	exit 1
}

print-grid() {
	local y x
	for ((y = 0; y < height; y++)); do
		for ((x = 0; x < width; x++)); do
			local key="$x,$y"
			local c=${grid[$key]}
			echo -n "$c"
		done
		echo
	done
}

reset-grid() {
	unset grid
	declare -Ag grid
	for key in "${!original_grid[@]}"; do
		value=${original_grid[$key]}
		grid[$key]=$value
	done
}

# return 1 if she leaves, 0 if this loops
run-simulation() {
	# reset guard variables
	direction='up'
	guard_x=$original_guard_x
	guard_y=$original_guard_y

	declare -A seen
	seen["$guard_x,$guard_y,$direction"]=true

	# number of loops we found
	while true; do
		# try to move the guard and see what happens

		# image what it would look like if we move her
		new_x=$guard_x
		new_y=$guard_y

		# figure out how to move her based on her direction
		case "$direction" in
			up) ((new_y--));;
			down) ((new_y++));;
			left) ((new_x--));;
			right) ((new_x++));;
			*) fatal "bad direction: $direction";;
		esac

		# check her bounds
		if ((new_x < 0 || new_x >= width || new_y < 0 || new_y >= height)); then
			return 1
		fi

		# check for collision
		key=$new_x,$new_y
		new_c=${grid[$key]}

		case "$new_c" in
			.) # we are free to move here
				case "$direction" in
					up) guard_char='^';;
					down) guard_char='v';;
					left) guard_char='<';;
					right) guard_char='>';;
				esac
				grid["$new_x,$new_y"]=$guard_char
				grid["$guard_x,$guard_y"]='.'
				guard_x=$new_x
				guard_y=$new_y
				key=$guard_x,$guard_y,$direction
				if [[ -n ${seen[$key]} ]]; then
					return 0
				fi
				seen[$key]=true
				;;
			'#') # we have a collision
				# turn her
				case "$direction" in
					up) direction=right;;
					down) direction=left;;
					left) direction=up;;
					right) direction=down;;
					*) fatal "bad direction: $direction";;
				esac
				case "$direction" in
					up) guard_char='^';;
					down) guard_char='v';;
					left) guard_char='<';;
					right) guard_char='>';;
				esac
				grid["$guard_x,$guard_y"]=$guard_char
				;;
			*)
				fatal "unknown grid char: $new_c"
				;;
		esac


		if $debug; then
			# visualizer
			sleep .05
			display=$(print-grid)
			clear
			echo "$display"
		fi
	done
}

spawn-task() (
	local id=$1
	local x=$2
	local y=$3

	local ret=0
	reset-grid
	orig=${grid[$x,$y]}
	if [[ $orig == '.' ]]; then
		grid[$x,$y]='#'

		if run-simulation; then
			ret=1
		fi

#		grid[$x,$y]='.'
	fi

	return "$ret"
)

# read in the data and save it into the grid
# also find out where the guard is
y=0
x=0
guard_x=-1
guard_y=-1
while read -r row; do
	width=${#row}
	for ((x = 0; x < width; x++)); do
		c=${row:x:1}

		# check if we have found the guard
		if [[ $c == '^' ]]; then
			guard_x=$x
			guard_y=$y
		fi

		key=$x,$y
		original_grid[$key]=$c
		grid[$key]=$c
	done

	((y++))
done
height=$y

original_guard_y=$guard_y
original_guard_x=$guard_x

# make sure we found the guard
if ((guard_x == -1 || guard_y == -1)); then
	fatal 'uh oh could not find guard in input'
fi

# print what we have so far
echo "width = $width"
echo "height = $height"
echo "guard location = $guard_x,$guard_y"

# extraordinarily brute force lol
num_loops=0
total_puzzles=$((width * height))
current_puzzle=0
declare -A pids
for ((y = 0; y < height; y++)); do
	for ((x = 0; x < width; x++)); do
		((current_puzzle++))
		echo "testing puzzle $current_puzzle / $total_puzzles"
		spawn-task "$current_puzzle" "$x" "$y" &
		pids["$!"]='true'
		len=${#pids[@]}

		if ((len > CONCURRENCY)); then
			wait -n -p id "${!pids[@]}"
			code=$?
			unset pids[$id]
			if ((code == 1)); then
				((num_loops++))
			fi
		fi
	done
done

# drain the rest of the pids
while ((${#pids[@]} > 0)); do
	wait -n -p id "${!pids[@]}"
	code=$?
	unset pids[$id]
	if ((code == 1)); then
		((num_loops++))
	fi
done

echo "total loops: $num_loops"
